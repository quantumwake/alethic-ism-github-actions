name: 'Docker Build and Deploy'
description: 'Build, push, and deploy Docker images to Kubernetes with branch/tag filtering'
inputs:
  image-name:
    description: 'Base image name (e.g., username/repository)'
    required: true
  registry:
    description: 'Docker registry to use'
    required: false
    default: 'docker.io'
  registry-username:
    description: 'Docker registry username'
    required: true
  registry-token:
    description: 'Docker registry token'
    required: true
  k8s-config:
    description: 'Kubernetes config type or command to load config'
    required: false
    default: 'none'
  k8s-namespace:
    description: 'Kubernetes namespace'
    required: false
    default: 'default'
  k8s-deployment:
    description: 'Kubernetes deployment name (if not specified, will use image-name-deployment)'
    required: false
  deployment-file:
    description: 'Path to Kubernetes deployment template'
    required: false
    default: 'k8s/deployment.yaml'
  build-args:
    description: 'Extra args for docker build'
    required: false
    default: ''
  tag:
    description: 'Image tag (defaults to git tag or short commit SHA)'
    required: false
    default: ''
  create-github-release:
    description: 'Create a GitHub release for tags'
    required: false
    default: 'false'
  deploy-branches:
    description: 'Comma-separated list of branches to deploy from (e.g., main,develop)'
    required: false
    default: ''
  deploy-tags:
    description: 'Comma-separated list of tag patterns to deploy from (e.g., v*,release-*)'
    required: false
    default: ''
  deploy-all:
    description: 'Deploy from all branches and tags if true (overrides deploy-branches and deploy-tags)'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      shell: bash
      run: |
        if [ -n "${{ inputs.tag }}" ]; then
          echo "VERSION=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        elif git describe --exact-match --tags >/dev/null 2>&1; then
          echo "VERSION=$(git describe --exact-match --tags)" >> $GITHUB_OUTPUT
        else
          echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi
        
    - name: Set image name
      id: set-image
      shell: bash
      run: |
        echo "IMAGE=${{ inputs.registry }}/${{ inputs.image-name }}:${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "IMAGE_LATEST=${{ inputs.registry }}/${{ inputs.image-name }}:latest" >> $GITHUB_OUTPUT

    - name: Build Docker image
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/docker_build.sh \
          -i "${{ steps.set-image.outputs.IMAGE }}" \
          -l "${{ steps.set-image.outputs.IMAGE_LATEST }}" \
          -- ${{ inputs.build-args }}

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-token }}

    - name: Push Docker image
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/docker_push.sh \
          -i "${{ steps.set-image.outputs.IMAGE }}" \
          -l "${{ steps.set-image.outputs.IMAGE_LATEST }}"

    # Conditionally run Kubernetes deployment
    - name: Check deployment conditions
      id: deploy-check
      shell: bash
      run: |
        SHOULD_DEPLOY="false"

        # Extract current branch or tag
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        TAG_NAME=${GITHUB_REF#refs/tags/}
        IS_TAG="false"
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          IS_TAG="true"
          CURRENT_REF="$TAG_NAME"
        else
          CURRENT_REF="$BRANCH_NAME"
        fi

        echo "Current ref: $CURRENT_REF (Is tag: $IS_TAG)"

        # Check if deploy-all is true
        if [[ "${{ inputs.deploy-all }}" == "true" ]]; then
          SHOULD_DEPLOY="true"
          echo "Deploying because deploy-all is true"

        # Check if current ref matches any deploy-branches
        elif [[ "$IS_TAG" == "false" && -n "${{ inputs.deploy-branches }}" ]]; then
          IFS=',' read -ra BRANCHES <<< "${{ inputs.deploy-branches }}"
          for b in "${BRANCHES[@]}"; do
            if [[ "$CURRENT_REF" == ${b} ]]; then
              SHOULD_DEPLOY="true"
              echo "Deploying because current branch '$CURRENT_REF' matches allowed branch pattern '$b'"
              break
            fi
          done

        # Check if current ref matches any deploy-tags pattern
        elif [[ "$IS_TAG" == "true" && -n "${{ inputs.deploy-tags }}" ]]; then
          IFS=',' read -ra TAGS <<< "${{ inputs.deploy-tags }}"
          for t in "${TAGS[@]}"; do
            # Convert glob pattern to regex for bash case statement
            pattern=${t//\*/.*}
            if [[ "$CURRENT_REF" =~ ^${pattern}$ ]]; then
              SHOULD_DEPLOY="true"
              echo "Deploying because current tag '$CURRENT_REF' matches allowed tag pattern '$t'"
              break
            fi
          done
        else
          echo "No deployment conditions met"
        fi

        echo "SHOULD_DEPLOY=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

    - name: Setup Kubernetes config
      if: inputs.k8s-config != 'none' && steps.deploy-check.outputs.SHOULD_DEPLOY == 'true'
      shell: bash
      run: ${{ inputs.k8s-config }}

    - name: Set deployment name
      id: set-deployment
      if: steps.deploy-check.outputs.SHOULD_DEPLOY == 'true'
      shell: bash
      run: |
        if [ -z "${{ inputs.k8s-deployment }}" ]; then
          echo "DEPLOYMENT_NAME=${{ inputs.image-name }}-deployment" >> $GITHUB_OUTPUT
        else
          echo "DEPLOYMENT_NAME=${{ inputs.k8s-deployment }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Kubernetes
      if: inputs.k8s-config != 'none' && steps.deploy-check.outputs.SHOULD_DEPLOY == 'true'
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/docker_deploy.sh \
          -i "${{ steps.set-image.outputs.IMAGE }}" \
          -f "${{ inputs.deployment-file }}" \
          -n "${{ inputs.k8s-namespace }}" \
          -d "${{ steps.set-deployment.outputs.DEPLOYMENT_NAME }}"

    # Conditionally create GitHub release
    - name: Generate changelog
      if: inputs.create-github-release == 'true' && startsWith(github.ref, 'refs/tags/')
      id: changelog
      shell: bash
      run: |
        GITHUB_TAG="${{ steps.version.outputs.VERSION }}"
        PREV_TAG=$(git describe --tags --abbrev=0 "${GITHUB_TAG}^" 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          echo "Changelog from $PREV_TAG ‚Üí $GITHUB_TAG"
          CHANGELOG=$(git log "$PREV_TAG..$GITHUB_TAG" --pretty=format:'- %s' || echo "")
        else
          echo "First release - no previous tag"
          CHANGELOG=$(git log --pretty=format:'- %s')
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      if: inputs.create-github-release == 'true' && startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## üìù Changelog
          ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

outputs:
  image:
    description: "Full Docker image name with tag"
    value: ${{ steps.set-image.outputs.IMAGE }}
